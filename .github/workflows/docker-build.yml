name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - master
      - prod
  workflow_dispatch:

permissions:
  contents: read  # Required for actions/checkout
  packages: write # Optional: if you were pushing to GitHub Packages registry

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        # By removing the 'version' line, it will use the version from package.json's packageManager field

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Or your project's Node.js version
          cache: 'pnpm'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Your AWS region

      - name: Login to AWS CodeArtifact and Get Token
        id: codeartifact_login # Añadimos un ID a este paso
        run: |
          aws codeartifact login --tool npm --domain xcala-codebase --domain-owner 680604704550 --repository xcala-agent --region us-east-1
          # El siguiente comando obtiene el token y lo establece como una salida del paso
          TOKEN=$(aws codeartifact get-authorization-token --domain xcala-codebase --domain-owner 680604704550 --query authorizationToken --output text)
          echo "token=$TOKEN" >> $GITHUB_OUTPUT

      # Los siguientes pasos (prune, install, build) son para el runner, no para el Docker build.
      # Si tu Dockerfile hace todo el build, podrías considerar eliminarlos para ahorrar tiempo,
      # pero pueden ser útiles para validaciones tempranas. Por ahora los dejamos.
      - name: Prune pnpm store (to clear potentially corrupted cache)
        run: pnpm store prune

      - name: Install dependencies (on runner)
        run: pnpm install --filter @xcala/front --frozen-lockfile

      - name: Build project (on runner)
        run: pnpm build --filter @xcala/front

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Usamos la v3 que es la más reciente

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./front/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/xcala-front:latest
          build-args: |
            CODEARTIFACT_AUTH_TOKEN=${{ steps.codeartifact_login.outputs.token }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
